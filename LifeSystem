using UnityEngine;
using System.Collections;
using Unity.VisualScripting;

public class LifeSystem : MonoBehaviour
{
    public int maxHealth = 100;
    public int currentHealth;
    public GameObject bloodEffect;

    private SpriteRenderer spriteRenderer;
    private Color originalColor;
    public Color damageColor = Color.red;
    public float damageFlashDuration = 0.1f;
    public float damageCooldown = 0.5f;
    private bool canTakeDamage = true;

    public LifeBar lifeBar;

    void Start()
    {
        currentHealth = maxHealth;
        spriteRenderer = GetComponent<SpriteRenderer>();
        originalColor = spriteRenderer.color;

        if (lifeBar != null)
        {
            lifeBar.SetMaxHealth(maxHealth);
            lifeBar.SetHealth(currentHealth, maxHealth);
        }
        else
        {
            Debug.LogError("LifeBar reference is missing in LifeSystem script");
        }
    }

    public void TakeDamage(int damage)
    {
        if (canTakeDamage)
        {
            StartCoroutine(ApplyDamage(damage));
        }
    }

    private IEnumerator ApplyDamage(int damage)
    {
        canTakeDamage = false;

        Instantiate(bloodEffect, transform.position, Quaternion.identity);
        currentHealth -= damage;
        currentHealth = Mathf.Max(currentHealth, 0);

        if (lifeBar != null)
        {
            lifeBar.SetHealth(currentHealth, maxHealth);
        }

        Debug.Log("Current Health: " + currentHealth);

        if (currentHealth <= 0)
        {
            Die();
        }
        else
        {
            StartCoroutine(DamageFlash());
        }

        yield return new WaitForSeconds(damageCooldown);
        canTakeDamage = true;
    }

    public void Heal(int amount)
    {
        currentHealth = Mathf.Min(currentHealth + amount, maxHealth);
        if (lifeBar != null)
        {
            lifeBar.SetHealth(currentHealth, maxHealth);
        }
    }

    public void Die()
    {
        Destroy(gameObject);
    }

    private IEnumerator DamageFlash()
    {
        spriteRenderer.color = damageColor;
        yield return new WaitForSeconds(damageFlashDuration);
        spriteRenderer.color = originalColor;
    }
}
